(*
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
open Printf

(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;

(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)

    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    val update : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string

    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = [] ;;

    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    let rec lookup (env : env) (varname : varid) : value =
      match env with
      | [] -> raise(EvalError (sprintf "varid %s not found in environment" varname))
      | ((id, v) :: tl) -> if id = varname then !v
                              else lookup tl varname ;;

    let rec extend (env : env) (varname : varid) (loc : value ref) : env =
      match env with
      | [] -> [(varname, loc)]
      | (id, v) :: tl -> if id = varname then (v := !loc; env)
        else (id, v) :: extend tl varname loc;;

    let rec update (env : env) (varname : varid) (loc : value ref) : env =
      match env with
      | [] -> [(varname, loc)]
      | (id, v) :: tl -> if id = varname then (id, loc) :: tl
        else (id, v) :: update tl varname loc;;

     let rec env_to_string (env : env) : string =
       match env with
       | [] -> ""
       | (id,v) :: tl->
         match !v with
         | Val (x) -> (sprintf ("%s") id) ^ " -> " ^
                        (exp_to_concrete_string x) ^ "; " ^
                      (env_to_string tl)
         | Closure (x, y) -> "[" ^ (env_to_string y) ^ "] " ^(sprintf ("%s") id) ^ " -> " ^
                             (exp_to_concrete_string x) ^ "; " ^
                             (env_to_string tl) ;;

    let value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val (x) -> exp_to_concrete_string x
      | Closure (x, y) -> if printenvp then
          "[" ^ (env_to_string y) ^ "] " ^ (exp_to_concrete_string x)
        else exp_to_concrete_string x    ;;

  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an enviornment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures).

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)

let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

(* function calculate binomial operators *)
let binopeval (bi : binop) (ex1 : expr) (ex2 : expr) : expr =
  match bi, ex1, ex2 with
  | Plus, Num(x1), Num(x2) -> Num(x1 + x2)
  | Plus, _, _ -> raise (EvalError "Plus can't add non integers")
  | Minus, Num(x1), Num(x2) -> Num(x1 - x2)
  | Minus, _, _ -> raise (EvalError "Minus can't subtract non integers")
  | Times, Num(x1), Num(x2) -> Num(x1 * x2)
  | Times, _, _ -> raise (EvalError "Times can't multiply non integers")
  | Equals, Num(x1), Num(x2) -> Bool(x1 = x2)
  | Equals, Bool(x1), Bool(x2) -> Bool(x1 = x2)
  | Equals, _, _ -> raise (EvalError "Equals can't compare non integers")
  | LessThan, Num(x1), Num(x2) -> Bool(x1 < x2)
  | LessThan, Bool(x1), Bool(x2) -> Bool(x1 < x2)
  | LessThan, _, _ -> raise (EvalError "LessThan can't compare non integers")


let eval_s (_exp : expr) (_env : Env.env) : Env.value =
  let rec eval (exp : expr) : expr =
    match exp with
    | Var (st) -> raise (EvalError
                (Printf.sprintf "evaluation error: unbound variable %s" st))
    | Num (x) -> Num (x)
    | Bool (tf) -> Bool (tf)
    | Unop (un, ex) ->
      (match un, (eval ex) with
       | Negate, Num(x) -> Num (~- x)
       | Negate, _ -> raise (EvalError "Negate can't negate non integers"))
    | Binop (bi, ex1, ex2) -> binopeval bi (eval ex1) (eval ex2)
    | Conditional (ex1, ex2, ex3) ->
      (* check ex1 evaluates to a bool, then evaluate the relevent branch *)
      (match (eval ex1) with
      | Bool (x) -> if x then eval ex2 else eval ex3
      | _ -> raise (EvalError "evaluation error: conditional must take bool"))
    | Fun (_, _) as f -> f
    | Let (f, def, body) ->
        (* evaluate def *)
        let def' = eval def in
        (* substitute def into body for instances of sf *)
        eval (subst f def' body)
    | Letrec (f, def, body) ->
      (* substitute whole lecrec into the def for any instances of f *)
      let d = eval def in
      let def' = subst f (Letrec (f, d, Var(f))) d in
        (* substitute new def into body for any instances of st *)
        eval (subst f def' body)
    | Raise -> raise (EvalException)
    | Unassigned -> raise (EvalError "evaluation error: Unassigned found")
    | App (ex1, ex2) ->
      (* evaluate ex1 to a Function, and substitue ex2 into the body of ex1 *)
      match (eval ex1) with
      | Fun (x, body) -> eval (subst x ex2 body)
      | _ ->raise(EvalError "applying function application on non-function") in
  (* transform output to Env.Val *)
  Env.Val (eval _exp)



(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)

(* helper function to extract expr from a Val *)
let extract (env_val : Env.value) : expr =
  match env_val with
  | Val (x) -> x
  | Closure (_, _) -> raise (EvalError "cannot extract from closure")


let rec eval_d (_exp : expr) (env : Env.env) : Env.value =
  match _exp with
  | Var (x) -> (Env.lookup env x)
  | Num (x) -> Env.Val(Num(x))
  | Bool (tf) -> Env.Val(Bool(tf))
  | Unop (un, ex) ->
    (match un, extract (eval_d ex env) with
     | Negate, Num(x) -> Env.Val(Num(~- x))
     | Negate, _ -> raise (EvalError "Negate can't negate non integers"))
  | Binop (bi, ex1, ex2) -> Env.Val(binopeval bi (extract(eval_d ex1 env))
                                      (extract (eval_d ex2 env)))
  | Conditional (ex1, ex2, ex3) ->
    (* evaluate first expression to bool then evaluate relevant outcome *)
    (match (eval_d ex1 env) with
     | Env.Val(Bool(tf)) -> if tf then eval_d ex2 env else eval_d ex3 env
     | _ -> raise (EvalError "evaluation error: conditional must take bool"))
  | Fun (_, _) as f -> Env.Val(f)
  | Let (id, ex1, ex2) ->
    (* evaluates ex1 and updates environment *)
    let env' = Env.extend env id (ref (eval_d ex1 env)) in
    (* evaluates ex2 in new environment *)
    eval_d ex2 env'
  | Letrec (id, ex1, ex2) ->
    (* evaluates ex1 and updates environment *)
    let env' = Env.extend env id (ref (eval_d ex1 env)) in
    (* evaluates ex2 in new environment *)
    eval_d ex2 env'
  | Raise -> raise (EvalException)
  | Unassigned -> raise (EvalError "evaluation error: Unassigned found")
  | App (f, arg) ->
    (* evaluate first argument to be a function *)
    match extract(eval_d f env) with
    | Fun (id, ex) ->
      (* update environment with evaluated ex2 *)
      let env' = Env.extend env id (ref(eval_d arg env)) in
      (* evaluate function in new environment *)
      eval_d ex env'
    | _ -> raise (EvalError
        "evaluation error: applying function application on a non function");;


(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)

   let rec eval_l (_exp : expr) (env : Env.env) : Env.value =
     match _exp with
     | Var (x) -> (Env.lookup env x)
     | Num (x) -> Env.Val(Num(x))
     | Bool (tf) -> Env.Val(Bool(tf))
     | Unop (un, ex) ->
       (match un, extract (eval_l ex env) with
        | Negate, Num(x) -> Env.Val(Num(~- x))
        | Negate, _ -> raise (EvalError "Negate can't negate non integers"))
     | Binop (bi, ex1, ex2) -> Env.Val(binopeval bi (extract(eval_l ex1 env))
                                         (extract (eval_l ex2 env)))
     | Conditional (ex1, ex2, ex3) ->
       (* evaluate first expression to bool then evaluate relevant outcome *)
       (match (eval_l ex1 env) with
        | Env.Val(Bool(tf)) -> if tf then eval_l ex2 env else eval_l ex3 env
        | _ -> raise (EvalError "evaluation error: conditional must take bool"))
     | Fun (_, _) as f -> Env.Closure(f, env)
     | Let (id, ex1, ex2) ->
       (* evaluates ex1 and updates environment *)
       let env' = Env.update env id (ref (eval_l ex1 env)) in
       (* evaluates ex2 in new environment *)
       eval_l ex2 env'
     | Letrec (id, ex1, ex2) ->
       (* evaluates ex1 and updates environment *)
       let env' = Env.extend env id (ref (eval_d ex1 env)) in
       (* evaluates ex2 in new environment *)
       eval_d ex2 env'
     | Raise -> raise (EvalException)
     | Unassigned -> raise (EvalError "evaluation error: Unassigned found")
     | App (p, q) ->
       match eval_l p env with
       | Env.Closure(f, e) ->
         (match f with
         | Fun (id, ex) ->
           (* evaluate b in dynamic environment *)
           let val_q = eval_l q env in
           (* add evaluated argument to lexical enviroment of function *)
           let env' = Env.update e id (ref(val_q)) in
           (* evaluate function in the new lexical environment *)
           eval_l ex env'
         | _ -> raise (EvalError
                    "evaluation error: function application on non-function"))
       | _ -> raise (EvalError
                       "evaluation error: function application on non-function")

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;

(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, evaluate is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)

let evaluate = eval_l ;;
